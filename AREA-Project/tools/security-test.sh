#!/bin/bash
# Script de tests de s√©curit√© complets pour l'application AREA
# Usage: ./security-test.sh

set -e

echo "üîí Tests de S√©curit√© Complets - Application AREA"
echo "=================================================="

PROJECT_DIR=$(pwd)
REPORT_DIR="$PROJECT_DIR/security-reports"
TIMESTAMP=$(date +%Y%m%d_%H%M%S)

# Cr√©ation du dossier de rapports
mkdir -p "$REPORT_DIR"

# V√©rifications pr√©alables
echo "üîç V√©rifications des outils de s√©curit√©..."

# Installation automatique des outils manquants
install_tool() {
    local tool=$1
    local install_cmd=$2
    
    if ! command -v "$tool" &> /dev/null; then
        echo "‚¨áÔ∏è  Installation de $tool..."
        eval "$install_cmd"
    else
        echo "‚úÖ $tool disponible"
    fi
}

# Trivy
install_tool "trivy" "curl -sfL https://raw.githubusercontent.com/aquasecurity/trivy/main/contrib/install.sh | sh -s -- -b /usr/local/bin"

# Grype
install_tool "grype" "curl -sSfL https://raw.githubusercontent.com/anchore/grype/main/install.sh | sh -s -- -b /usr/local/bin"

# V√©rifier les images
echo ""
echo "üîç V√©rification des images Docker..."
for image in "area-frontend:latest" "area-backend:latest"; do
    if ! docker images "$image" -q | grep -q .; then
        echo "‚ùå Image $image non trouv√©e"
        echo "üîß Lancez d'abord: ./build-all.sh"
        exit 1
    fi
done

echo "‚úÖ Images trouv√©es"

# 1. Scan des vuln√©rabilit√©s avec Trivy
echo ""
echo "üîç 1. Scan des vuln√©rabilit√©s avec Trivy"
echo "----------------------------------------"

echo "üì¶ Scan Frontend..."
trivy image --format json --output "$REPORT_DIR/trivy-frontend-$TIMESTAMP.json" area-frontend:latest
trivy image --severity HIGH,CRITICAL area-frontend:latest > "$REPORT_DIR/trivy-frontend-summary-$TIMESTAMP.txt"

echo "üì¶ Scan Backend..."
trivy image --format json --output "$REPORT_DIR/trivy-backend-$TIMESTAMP.json" area-backend:latest
trivy image --severity HIGH,CRITICAL area-backend:latest > "$REPORT_DIR/trivy-backend-summary-$TIMESTAMP.txt"

# Scan des secrets dans le code source
echo "üîç Scan des secrets dans le code source..."
trivy fs --security-checks secret --format json --output "$REPORT_DIR/trivy-secrets-$TIMESTAMP.json" .
trivy fs --security-checks secret . > "$REPORT_DIR/trivy-secrets-summary-$TIMESTAMP.txt"

# 2. Scan avec Grype
echo ""
echo "üîç 2. Scan des vuln√©rabilit√©s avec Grype"
echo "----------------------------------------"

echo "üì¶ Scan Frontend..."
grype area-frontend:latest -o json > "$REPORT_DIR/grype-frontend-$TIMESTAMP.json"

echo "üì¶ Scan Backend..."
grype area-backend:latest -o json > "$REPORT_DIR/grype-backend-$TIMESTAMP.json"

# 3. Docker Scout (si disponible)
echo ""
echo "üîç 3. Docker Scout Analysis"
echo "---------------------------"

if docker scout --help &> /dev/null 2>&1; then
    docker scout cves area-frontend:latest --format sarif --output "$REPORT_DIR/scout-frontend-$TIMESTAMP.sarif"
    docker scout cves area-backend:latest --format sarif --output "$REPORT_DIR/scout-backend-$TIMESTAMP.sarif"
    
    docker scout recommendations area-frontend:latest > "$REPORT_DIR/scout-recommendations-frontend-$TIMESTAMP.txt"
    docker scout recommendations area-backend:latest > "$REPORT_DIR/scout-recommendations-backend-$TIMESTAMP.txt"
else
    echo "‚ö†Ô∏è  Docker Scout non disponible"
fi

# 4. Audit des Dockerfiles avec Hadolint
echo ""
echo "üîç 4. Audit des Dockerfiles"
echo "---------------------------"

if command -v hadolint &> /dev/null; then
    echo "üìÑ Audit Dockerfile Frontend..."
    hadolint front/Dockerfile > "$REPORT_DIR/hadolint-frontend-$TIMESTAMP.txt" || true
    
    echo "üìÑ Audit Dockerfile Backend..."
    hadolint back/Dockerfile > "$REPORT_DIR/hadolint-backend-$TIMESTAMP.txt" || true
else
    echo "‚¨áÔ∏è  Installation de Hadolint..."
    docker pull hadolint/hadolint
    
    echo "üìÑ Audit Dockerfile Frontend..."
    docker run --rm -i hadolint/hadolint < front/Dockerfile > "$REPORT_DIR/hadolint-frontend-$TIMESTAMP.txt" || true
    
    echo "üìÑ Audit Dockerfile Backend..."
    docker run --rm -i hadolint/hadolint < back/Dockerfile > "$REPORT_DIR/hadolint-backend-$TIMESTAMP.txt" || true
fi

# 5. Tests de s√©curit√© runtime
echo ""
echo "üîç 5. Tests de s√©curit√© runtime"
echo "-------------------------------"

# D√©marrer les containers si n√©cessaire
if ! docker ps | grep -q area_frontend; then
    echo "üöÄ D√©marrage des containers pour les tests..."
    docker-compose up -d
    sleep 10
fi

# Tests des utilisateurs
echo "üë§ V√©rification des utilisateurs non-root..."
{
    echo "=== Tests Utilisateurs ==="
    echo "Frontend:"
    docker exec area_frontend id || echo "Erreur: Container Frontend non accessible"
    echo ""
    echo "Backend:"
    docker exec area_backend id || echo "Erreur: Container Backend non accessible"
    echo ""
} > "$REPORT_DIR/runtime-users-$TIMESTAMP.txt"

# Tests des capabilities
echo "üîí V√©rification des capabilities..."
{
    echo "=== Docker Capabilities ==="
    echo "Frontend:"
    docker inspect area_frontend --format='{{.HostConfig.CapAdd}}' || echo "N/A"
    docker inspect area_frontend --format='{{.HostConfig.CapDrop}}' || echo "N/A"
    echo ""
    echo "Backend:"
    docker inspect area_backend --format='{{.HostConfig.CapAdd}}' || echo "N/A"
    docker inspect area_backend --format='{{.HostConfig.CapDrop}}' || echo "N/A"
    echo ""
} > "$REPORT_DIR/runtime-capabilities-$TIMESTAMP.txt"

# Tests des headers de s√©curit√©
echo "üõ°Ô∏è Tests des headers de s√©curit√©..."
{
    echo "=== Headers de S√©curit√© ==="
    echo "Frontend (localhost:3000):"
    curl -s -I http://localhost:3000/ | grep -E "(X-Frame-Options|X-Content-Type-Options|Content-Security-Policy|Strict-Transport-Security)" || echo "Headers de s√©curit√© non d√©tect√©s"
    echo ""
    echo "Backend (localhost:5001):"
    curl -s -I http://localhost:5001/health | grep -E "(X-Frame-Options|X-Content-Type-Options|Content-Security-Policy|Strict-Transport-Security)" || echo "Headers de s√©curit√© non d√©tect√©s"
    echo ""
} > "$REPORT_DIR/runtime-headers-$TIMESTAMP.txt"

# 6. Test de p√©n√©tration avec OWASP ZAP (optionnel)
echo ""
echo "üîç 6. Test de p√©n√©tration OWASP ZAP"
echo "-----------------------------------"

if docker ps | grep -q zap; then
    docker rm -f zap 2>/dev/null || true
fi

echo "üöÄ D√©marrage d'OWASP ZAP..."
docker run -d --name zap -p 8090:8080 zaproxy/zap-stable zap-x.sh -daemon -host 0.0.0.0 -port 8080

# Attendre que ZAP soit pr√™t
sleep 30

# Quick scan du frontend
echo "üï∑Ô∏è Scan du frontend..."
docker exec zap zap-cli quick-scan http://host.docker.internal:3000 || echo "Scan ZAP √©chou√©"

# G√©n√©rer le rapport
docker exec zap zap-cli report -o /tmp/zap-report.html -f html || echo "G√©n√©ration rapport ZAP √©chou√©e"
docker cp zap:/tmp/zap-report.html "$REPORT_DIR/zap-report-$TIMESTAMP.html" 2>/dev/null || echo "Copie rapport ZAP √©chou√©e"

# Nettoyer ZAP
docker rm -f zap

# 7. G√©n√©ration du rapport de synth√®se
echo ""
echo "üìä G√©n√©ration du rapport de synth√®se..."

cat > "$REPORT_DIR/security-summary-$TIMESTAMP.md" << EOF
# Rapport de S√©curit√© - Application AREA
**Date**: $(date)
**Version**: $TIMESTAMP

## üîç Tests Effectu√©s

### 1. Scan des Vuln√©rabilit√©s
- ‚úÖ Trivy (Images + Secrets)
- ‚úÖ Grype
- ‚úÖ Docker Scout (si disponible)

### 2. Audit de Configuration
- ‚úÖ Hadolint (Dockerfiles)
- ‚úÖ Utilisateurs non-root
- ‚úÖ Capabilities Docker
- ‚úÖ Headers de s√©curit√©

### 3. Tests Runtime
- ‚úÖ V√©rification des permissions
- ‚úÖ Test des endpoints
- ‚úÖ OWASP ZAP (Pentesting)

## üìÅ Fichiers G√©n√©r√©s

$(ls -la "$REPORT_DIR"/*$TIMESTAMP* | awk '{print "- " $9}')

## üîç Analyse Rapide

### Vuln√©rabilit√©s Critiques (Trivy)
\`\`\`
$(grep -c "CRITICAL" "$REPORT_DIR/trivy-frontend-summary-$TIMESTAMP.txt" 2>/dev/null || echo "0") vuln√©rabilit√©s critiques d√©tect√©es dans le Frontend
$(grep -c "CRITICAL" "$REPORT_DIR/trivy-backend-summary-$TIMESTAMP.txt" 2>/dev/null || echo "0") vuln√©rabilit√©s critiques d√©tect√©es dans le Backend
\`\`\`

### Recommandations
1. Examiner les rapports d√©taill√©s dans le dossier security-reports/
2. Corriger les vuln√©rabilit√©s CRITICAL et HIGH en priorit√©
3. Mettre √† jour les images de base si n√©cessaire
4. V√©rifier la configuration des headers de s√©curit√©

## üìû Actions √† Suivre
- [ ] Examiner les rapports Trivy
- [ ] Corriger les Dockerfiles selon Hadolint
- [ ] Impl√©menter les headers de s√©curit√© manquants
- [ ] Planifier les mises √† jour de s√©curit√©
EOF

# Nettoyage final
echo ""
echo "üßπ Nettoyage..."
docker-compose down 2>/dev/null || true

# R√©sultats finaux
echo ""
echo "‚úÖ Tests de s√©curit√© termin√©s!"
echo "=============================="
echo ""
echo "üìÅ Rapports g√©n√©r√©s dans: $REPORT_DIR/"
echo "üìä Rapport de synth√®se: security-summary-$TIMESTAMP.md"
echo ""
echo "üîç Fichiers principaux:"
echo "   - trivy-frontend-summary-$TIMESTAMP.txt"
echo "   - trivy-backend-summary-$TIMESTAMP.txt"
echo "   - trivy-secrets-summary-$TIMESTAMP.txt"
echo "   - zap-report-$TIMESTAMP.html"
echo ""
echo "üö® Prochaines √©tapes:"
echo "   1. Examiner les rapports de vuln√©rabilit√©s"
echo "   2. Corriger les probl√®mes CRITICAL et HIGH"
echo "   3. Mettre √† jour les images de base"
echo "   4. Re-ex√©cuter les tests apr√®s corrections"

# Afficher un r√©sum√© des vuln√©rabilit√©s critiques s'il y en a
if [ -f "$REPORT_DIR/trivy-frontend-summary-$TIMESTAMP.txt" ]; then
    CRITICAL_COUNT=$(grep -c "CRITICAL" "$REPORT_DIR/trivy-frontend-summary-$TIMESTAMP.txt" 2>/dev/null || echo "0")
    HIGH_COUNT=$(grep -c "HIGH" "$REPORT_DIR/trivy-frontend-summary-$TIMESTAMP.txt" 2>/dev/null || echo "0")
    
    if [ "$CRITICAL_COUNT" -gt 0 ] || [ "$HIGH_COUNT" -gt 0 ]; then
        echo ""
        echo "‚ö†Ô∏è  ATTENTION: $CRITICAL_COUNT vuln√©rabilit√©s CRITICAL et $HIGH_COUNT vuln√©rabilit√©s HIGH d√©tect√©es!"
        echo "   Consultez le rapport d√©taill√© pour plus d'informations."
    fi
fi
