#!/bin/bash

echo "üîß Test d'authentification unifi√©e Mobile"
echo "========================================"

# Couleurs pour les logs
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# R√©pertoire mobile
MOBILE_DIR="/home/depop/delivery/semester_tek3/G-DEV-500-STG-5-1-area-1/AREA-Project/mobile"

echo -e "${BLUE}1Ô∏è‚É£ V√©rification de la structure des fichiers...${NC}"

# V√©rifier que tous les fichiers n√©cessaires existent
FILES_TO_CHECK=(
    "src/hooks/usePasswordValidation.ts"
    "src/hooks/useEmailValidation.ts"  
    "src/hooks/useUsernameValidation.ts"
    "src/components/PasswordStrength.tsx"
    "src/components/ProtectedRoute.tsx"
    "src/pages/auth/AuthPage.tsx"
    "src/pages/LandingPage.tsx"
    "src/pages/dashboard/ProtectedDashboard.tsx"
    "src/services/auth.service.ts"
)

for file in "${FILES_TO_CHECK[@]}"
do
    if [ -f "$MOBILE_DIR/$file" ]; then
        echo -e "${GREEN}‚úÖ $file${NC}"
    else
        echo -e "${RED}‚ùå $file - MANQUANT${NC}"
    fi
done

echo ""
echo -e "${BLUE}2Ô∏è‚É£ V√©rification de la configuration...${NC}"

# V√©rifier le fichier .env
if [ -f "$MOBILE_DIR/.env" ]; then
    echo -e "${GREEN}‚úÖ Configuration .env trouv√©e${NC}"
    if grep -q "VITE_API_URL=http://localhost:5001" "$MOBILE_DIR/.env"; then
        echo -e "${GREEN}‚úÖ URL API correcte${NC}"
    else
        echo -e "${YELLOW}‚ö†Ô∏è V√©rifier l'URL API dans .env${NC}"
    fi
else
    echo -e "${RED}‚ùå Fichier .env manquant${NC}"
fi

echo ""
echo -e "${BLUE}3Ô∏è‚É£ Test de connectivit√© backend...${NC}"

# Tester que l'API backend fonctionne
if curl -s http://localhost:5001/mobile/health > /dev/null; then
    echo -e "${GREEN}‚úÖ Backend accessible${NC}"
    
    # Test endpoint d'authentification  
    echo -e "${BLUE}Endpoints d'authentification:${NC}"
    
    # Test endpoint register (doit retourner une erreur mais √™tre accessible)
    REGISTER_STATUS=$(curl -s -w "%{http_code}" -X POST -H "Content-Type: application/json" \
        -d '{"email":"test","password":"test"}' \
        http://localhost:5001/auth/register -o /dev/null)
    
    if [ "$REGISTER_STATUS" = "400" ] || [ "$REGISTER_STATUS" = "409" ]; then
        echo -e "${GREEN}‚úÖ /auth/register accessible${NC}"
    else
        echo -e "${YELLOW}‚ö†Ô∏è /auth/register status: $REGISTER_STATUS${NC}"
    fi
    
    # Test endpoint login  
    LOGIN_STATUS=$(curl -s -w "%{http_code}" -X POST -H "Content-Type: application/json" \
        -d '{"email":"test","password":"test"}' \
        http://localhost:5001/auth/login -o /dev/null)
        
    if [ "$LOGIN_STATUS" = "400" ] || [ "$LOGIN_STATUS" = "401" ]; then
        echo -e "${GREEN}‚úÖ /auth/login accessible${NC}"
    else
        echo -e "${YELLOW}‚ö†Ô∏è /auth/login status: $LOGIN_STATUS${NC}"
    fi
    
else
    echo -e "${RED}‚ùå Backend non accessible sur localhost:5001${NC}"
    echo -e "${YELLOW}üí° Assurez-vous que le backend est d√©marr√©:${NC}"
    echo "   cd AREA-Project/back && npm run start:dev"
fi

echo ""
echo -e "${BLUE}4Ô∏è‚É£ V√©rification TypeScript...${NC}"

cd "$MOBILE_DIR"

# V√©rifier que les types TypeScript sont corrects (sans build complet)
if npm run type-check 2>/dev/null || npx tsc --noEmit 2>/dev/null; then
    echo -e "${GREEN}‚úÖ Types TypeScript valides${NC}"
else
    echo -e "${YELLOW}‚ö†Ô∏è V√©rifiez les types TypeScript${NC}"
fi

echo ""
echo -e "${BLUE}5Ô∏è‚É£ R√©sum√© et next steps...${NC}"

echo -e "${GREEN}‚úÖ Fonctionnalit√©s impl√©ment√©es:${NC}"
echo "   ‚Ä¢ Page d'authentification unifi√©e (Login/Register)"
echo "   ‚Ä¢ Validation RGPD des mots de passe"
echo "   ‚Ä¢ Validation email et username"
echo "   ‚Ä¢ Dashboard prot√©g√© par authentification"
echo "   ‚Ä¢ Redirection automatique selon l'√©tat de connexion"
echo "   ‚Ä¢ Int√©gration avec l'API backend"

echo ""
echo -e "${YELLOW}üöÄ Pour tester l'application:${NC}"
echo "1. D√©marrer le backend: cd back && npm run start:dev"
echo "2. D√©marrer le mobile: cd mobile && npm run dev"  
echo "3. Ouvrir http://localhost:5175"
echo "4. Tester l'inscription avec validation RGPD"
echo "5. Tester la connexion et l'acc√®s au dashboard"

echo ""
echo -e "${BLUE}üéØ Test termin√©!${NC}"